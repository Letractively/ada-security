#summary Security Policies

== Security Policies ==
The Security Policy defines and implements the set of security rules that specify
how to protect the system or resources. The <tt>Policy_Manager</tt> maintains
the security policies.  These policies are registered when an application starts
and before reading the policy configuration files.

[http://ada-security.googlecode.com/svn/wiki/PolicyModel.png]

While the policy configuration files are processed, the policy instances that have been
registered will create a security controller and bind it to a given permission.  After
successful initialization, the <tt>Policy_Manager</tt> contains a list of securiy
controllers which are associated with each permission defined by the application.

== Role Based Security Policy ==
The <tt>Security.Policies.Roles</tt> package implements a role based security policy.

=== Policy creation ===
An instance of the <tt>Role_Policy</tt> must be created and registered in the policy manager.
Get or declare the following variables:

{{{
  Manager : Security.Policies.Policy_Manager;
  Policy  : Security.Policies.Roles.Role_Policy_Access;
}}}

Create the role policy and register it in the policy manager as follows:

{{{
  Policy := new Role_Policy;
  Manager.Add_Policy (Policy.all'Access);
}}}

=== Policy Configuration ===
A role is represented by a name in security configuration files.  A role based permission
is associated with a list of roles.  The permission is granted if the user has one of these
roles.  When the role based policy is registered in the policy manager, the following
XML configuration is used:

{{{
  <security-role>
    <role-name>admin</role-name>
  </security-role>
  <security-role>
    <role-name>manager</role-name>
  </security-role>
  <role-permission>
    <name>create-workspace</name>
    <role>admin</role>
    <role>manager</role>
  </role-permission>
}}}

This definition declares two roles: <tt>admin</tt> and <tt>manager</tt>
It defines a permission <b>create-workspace</b> that will be granted if the
user has either the <b>admin</b> or the <b>manager</b> role.

Each role is identified by a name in the configuration file.  It is represented by
a <tt>Role_Type</tt>.  To provide an efficient implementation, the <tt>Role_Type</tt>
is represented as an integer with a limit of 64 different roles.

=== Assigning roles to users ===
A <tt>Security_Context</tt> must be associated with a set of roles before checking the
permission.  This is done by using the <tt>Set_Role_Context</tt> operation:

{{{
   Security.Policies.Roles.Set_Role_Context (Security.Contexts.Current, "admin");
}}}
== URL Security Policy ==
The <tt>Security.Policies.Urls</tt> implements a security policy intended to be used
in web servers.

=== Policy creation ===
An instance of the <tt>URL_Policy</tt> must be created and registered in the policy manager.
Get or declare the following variables:

{{{
  Manager : Security.Policies.Policy_Manager;
  Policy  : Security.Policies.Urls.URL_Policy_Access;
}}}

Create the URL policy and register it in the policy manager as follows:

{{{
  Policy := new URL_Policy;
  Manager.Add_Policy (Policy.all'Access);
}}}

=== Policy Configuration ===
Once the URL policy is registered, the policy manager can read and process the following
XML configuration:

{{{
  <url-policy id='1'>
   <permission>create-workspace</permission>
   <permission>admin</permission>
   <url-pattern>/workspace/create</url-pattern>
   <url-pattern>/workspace/setup/*</url-pattern>
  </url-policy>
}}}

This policy gives access to the URL that match one of the URL pattern if the
security context has the permission <b>create-workspace</b> or <b>admin</b>.
These two permissions are checked according to another security policy.
The XML configuration can define several <tt>url-policy</tt>.  They are checked in
the order defined in the XML.  In other words, the first <tt>url-policy</tt> that matches
the URL is used to verify the permission.

The <tt>url-policy</tt> definition can contain several <tt>permission</tt>.

=== Checking for permission ===
To check a URL permission, you must declare a <tt>URI_Permission</tt> object with the URL.

{{{
   URI    : constant String := ...;
   Perm   : constant Policies.URLs.URI_Permission (1, URI'Length)
             := URI_Permission '(1, Len => URI'Length, URI => URI);
   Result : Boolean;
}}}

Having the security context, we can check the permission:

{{{
   Context.Has_Permission (Perm, Result);
}}}
== Security Controller ==
The <b>Security.Controllers</b> package defines the security controller used to
verify that a given permission is granted.  A security controller uses the security
context and other controller specific and internal data to verify that the permission
is granted.

Security controller instances are created when the security policy rules are parsed.
These instances are shared across possibly several concurrent requests.

----
[http://code.google.com/p/ada-gen Generated by Dynamo] _from security-policies.ads_

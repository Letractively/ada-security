#summary Open ID 2.0 Support

== OpenID ==
The <b>Security.Openid</b> package implements an authentication framework based
on OpenID 2.0.

See OpenID Authentication 2.0 - Final
http://openid.net/specs/openid-authentication-2_0.html

There are basically two steps that an application must implement:

  * <b>Discovery</b>: to resolve and use the OpenID provider and redirect the user to the provider authentication form.
  * <b>Verify</b>: to decode the authentication and check its result.

[http://ada-security.googlecode.com/svn/wiki/OpenID.png]

The authentication process is the following:

  * The application should redirect the user to the authentication URL.
  * The OpenID provider authenticate the user and redirects the user to the callback CB.
  * The association is decoded from the callback parameter.
  * The <b>Verify</b> procedure is called with the association to check the result and obtain the authentication results.


== Discovery: creating the authentication URL ==
The first step is to create an authentication URL to which the user must be redirected.
In this step, we have to create an OpenId manager, discover the OpenID provider,
do the association and get an <b>End_Point</b>.

{{{
  Mgr   : Openid.Manager;
  OP    : Openid.End_Point;
  Assoc : constant Association_Access := new Association;
}}}

The following steps are performed:

  * The <b>Initialize</b> procedure is called to configure the OpenID realm and set the OpenID return callback CB.
  * The <b>Discover</b> procedure is called to retrieve from the OpenID provider the XRDS stream and identify the provider.  An <b>End_Point</b> is returned in <tt>OP</tt>.
  * The <b>Associate</b> procedure is called to make the association with the <b>End_Point</b>. The <b>Association</b> record holds session, and authentication.

{{{
  Server.Initialize (Mgr);
  Mgr.Discover (Provider, OP);  --  Yadis discovery (get the XRDS file).
  Mgr.Associate (OP, Assoc.all);--  Associate and get an end-point with a key.
}}}

After this first step, you must manage to save the association in the HTTP session.
Then you must redirect to the authentication URL that is obtained by using:

{{{
  Auth_URL : constant String := Mgr.Get_Authentication_URL (OP, Assoc.all);
}}}

== Verify: acknowledge the authentication in the callback URL ==
The second step is done when the user has finished the authentication successfully or not.
For this step, the application must get back the association that was saved in the session.
It must also prepare a parameters object that allows the OpenID framework to get the
URI parameters from the return callback.

{{{
  Mgr     : Openid.Manager;
  Assoc   : Association_Access := ...;  --  Get the association saved in the session.
  Auth    : Openid.Authentication;
  Params  : Auth_Params;
}}}

The OpenID manager must be initialized and the <b>Verify</b> procedure is called with
the association, parameters and the authentication result.  The <b>Get_Status</b> function
must be used to check that the authentication succeeded.

{{{
  Server.Initialize (Mgr);
  Mgr.Verify (Assoc.all, Params, Auth);
  if Openid.Get_Status (Auth) /= Openid.AUTHENTICATED then ...  -- Failure.


}}}

----
[http://code.google.com/p/ada-gen Generated by Dynamo] _from security-openid.ads_
